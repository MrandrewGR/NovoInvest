name: Deploy to Hetzner

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория с полной историей
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Загружает всю историю коммитов

      # Шаг 2: Настройка Git для обнаружения изменений
      - name: Set up Git
        run: git fetch origin main

      # Шаг 3: Определение изменённых микросервисов и важных файлов
      - name: Determine changed services and important files
        id: changes
        run: |
          # Определяем изменения только в папке services/ и исключаем файлы
          CHANGED_SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ | grep '^services/' | awk -F/ '{print $2}' | uniq | grep -v '^__init__.py$' || true)
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

          # Проверяем, изменены ли docker-compose.yml или deploy.yml
          CHANGED_DOCKER_COMPOSE=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- docker-compose.yml | wc -l)
          CHANGED_DEPLOY_YML=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- .github/workflows/deploy.yml | wc -l)

          if [ "$CHANGED_DEPLOY_YML" -gt 0 ]; then
            echo "FULL_DEPLOY=true" >> $GITHUB_ENV
          elif [ "$CHANGED_DOCKER_COMPOSE" -gt 0 ]; then
            echo "DOCKER_COMPOSE_CHANGED=true" >> $GITHUB_ENV
          fi

      # Шаг 4: Отладка - вывод изменённых микросервисов и списка изменённых файлов
      - name: Debug Git Diff
        run: |
          echo "CHANGED_SERVICES: $CHANGED_SERVICES"
          echo "DOCKER_COMPOSE_CHANGED: $DOCKER_COMPOSE_CHANGED"
          echo "FULL_DEPLOY: $FULL_DEPLOY"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ docker-compose.yml .github/workflows/deploy.yml

      # Шаг 5: Установка rsync и других зависимостей
      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      # Шаг 6: Настройка SSH Agent с использованием секретного ключа
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Шаг 7: Добавление хоста в known_hosts
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Шаг 8: Тестирование SSH подключения
      - name: Test SSH Connection
        run: ssh dev@${{ secrets.SSH_HOST }} 'echo "SSH connection established"'

      # Шаг 9: Установка Docker и Docker Compose на сервере (если не установлены)
      - name: Install Docker and Docker Compose on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            # Проверка установки Docker
            if ! command -v docker &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            # Проверка установки Docker Compose
            if ! command -v docker compose &> /dev/null
            then
              sudo mkdir -p /home/dev/.docker/cli-plugins/
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o /home/dev/.docker/cli-plugins/docker-compose
              sudo chmod +x /home/dev/.docker/cli-plugins/docker-compose
            fi
            docker compose version
          EOF

      # Шаг 10: Добавление пользователя в группу Docker
      - name: Add user to Docker group
        run: ssh dev@${{ secrets.SSH_HOST }} "sudo usermod -aG docker dev"

      # Шаг 11: Создание или обновление .env файла на сервере (если требуется)
      - name: Create or Update .env file on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "mkdir -p /home/dev/app/env"
          ssh dev@${{ secrets.SSH_HOST }} "cat <<EOF > /home/dev/app/env/.env
          TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_PHONE=${{ secrets.TELEGRAM_PHONE }}
          TELEGRAM_CHANNEL_ID=${{ secrets.TELEGRAM_CHANNEL_ID }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          KAFKA_BOOTSTRAP_SERVERS=kafka:9092
          EOF"

      # Шаг 12: Деплой изменённых микросервисов или полный деплой
      - name: Deploy services
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ]; then
            echo "Deploying all services due to changes in deploy.yml"
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename)
          elif [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            echo "docker-compose.yml changed. Deploying all services."
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename)
          elif [ -n "${{ env.CHANGED_SERVICES }}" ]; then
            echo "Deploying changed services: $CHANGED_SERVICES"
            SERVICES=$CHANGED_SERVICES
          else
            echo "No relevant changes detected. Exiting deployment."
            exit 0
          fi
      
          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            # Копируем весь проект на сервер
            rsync -avz --exclude '.git' --exclude '.github' . dev@${{ secrets.SSH_HOST }}:/home/dev/app/
            # Запускаем все сервисы
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d --build --force-recreate"
          else
            # Копируем только изменённые сервисы
            for service in $SERVICES; do
              echo "Deploying service: $service"
              # Копируем целиком папку этого микросервиса
              rsync -avz --exclude '.git' --exclude '.github' services/$service/ dev@${{ secrets.SSH_HOST }}:/home/dev/app/services/$service/
            done
            # После копирования всех изменённых сервисов — поднимаем их
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d --build --force-recreate $SERVICES"
          fi

      # Шаг 13: Проверка статуса Docker Compose
      - name: Check Docker Compose Status
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps"

      # Шаг 14: Просмотр логов для деплоенных микросервисов
      - name: View Logs for Deployed Services
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename)
          else
            SERVICES=$CHANGED_SERVICES
          fi

          for service in $SERVICES; do
            echo "Логи сервиса: $service"
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose logs $service --tail 50"
          done
