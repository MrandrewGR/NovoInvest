# .github/workflows/deploy.yml

name: Deploy to Hetzner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
      TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
      TELEGRAM_PHONE: ${{ secrets.TELEGRAM_PHONE }}
      TELEGRAM_TARGET_IDS: ${{ secrets.TELEGRAM_TARGET_IDS }}
      SESSION_FILE_BASE64: ${{ secrets.SESSION_FILE_BASE64 }}
      ALLOWED_USER_IDS: ${{ secrets.ALLOWED_USER_IDS }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step to get the latest commit hash of mirco_services_data_management
      - name: Get latest commit hash of mirco_services_data_management
        id: lib_hash
        run: |
          LIB_COMMIT_HASH=$(git ls-remote https://github.com/MrandrewGR/mirco_services_data_management.git refs/heads/main | awk '{print $1}')
          if [ -z "$LIB_COMMIT_HASH" ]; then
            echo "No commit hash found, defaulting to 'main'"
            LIB_COMMIT_HASH="main"
          fi
          echo "Latest commit hash for mirco_services_data_management: $LIB_COMMIT_HASH"
          echo "LIB_COMMIT_HASH=$LIB_COMMIT_HASH" >> $GITHUB_ENV
          # Optionally, force a rebuild by using a timestamp
          echo "CACHEBUST=$(date +%s)" >> $GITHUB_ENV

      - name: Set up Git
        run: git fetch origin main

      - name: Determine changed services and important files
        id: changes
        run: |
          CHANGED_SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ \
            | grep '^services/' \
            | awk -F/ '{print $2}' \
            | uniq || true)

          # Turn list into a comma-separated string
          CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | paste -sd "," -)
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

          CHANGED_DOCKER_COMPOSE=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- docker-compose.yml | wc -l)
          CHANGED_DEPLOY_YML=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- .github/workflows/deploy.yml | wc -l)

          if [ "$CHANGED_DEPLOY_YML" -gt 0 ]; then
            echo "FULL_DEPLOY=true" >> $GITHUB_ENV
          elif [ "$CHANGED_DOCKER_COMPOSE" -gt 0 ]; then
            echo "DOCKER_COMPOSE_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Check if Kafka Config Changed
        id: kafka_config
        run: |
          CONFIG_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/kafka/ docker-compose.yml)
          if [ -n "$CONFIG_CHANGED" ]; then
            echo "KAFKA_CONFIG_CHANGED=true" >> $GITHUB_ENV
          else
            echo "KAFKA_CONFIG_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Mask secrets
        # This step ensures any references to these env vars become *** in logs
        run: |
          echo "::add-mask::${SSH_HOST}"
          echo "::add-mask::${TELEGRAM_BOT_TOKEN}"
          echo "::add-mask::${TELEGRAM_API_ID}"
          echo "::add-mask::${TELEGRAM_API_HASH}"
          echo "::add-mask::${TELEGRAM_PHONE}"
          echo "::add-mask::${TELEGRAM_TARGET_IDS}"
          echo "::add-mask::${SESSION_FILE_BASE64}"

      - name: Debug Git Diff
        run: |
          echo "Changed services: $CHANGED_SERVICES"
          echo "DOCKER_COMPOSE_CHANGED: $DOCKER_COMPOSE_CHANGED"
          echo "FULL_DEPLOY: $FULL_DEPLOY"
          echo "KAFKA_CONFIG_CHANGED: $KAFKA_CONFIG_CHANGED"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ docker-compose.yml .github/workflows/deploy.yml

      - name: Install rsync and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync jq

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: ssh dev@$SSH_HOST 'echo "SSH connection established"'

      - name: Install Docker and Docker Compose on server
        run: |
          ssh dev@$SSH_HOST "if ! command -v docker &> /dev/null; then
            sudo apt-get update &&
            sudo apt-get install -y ca-certificates curl gnupg lsb-release &&
            sudo mkdir -p /etc/apt/keyrings &&
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg &&
            echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
            sudo apt-get update &&
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &&
            sudo systemctl enable docker &&
            sudo systemctl start docker
          fi &&
          docker --version &&
          docker compose version"

      - name: Add user to Docker group
        run: ssh dev@$SSH_HOST "sudo usermod -aG docker dev"

      - name: Reload SSH session to apply Docker group membership
        run: ssh dev@$SSH_HOST "newgrp docker && echo 'Docker group membership applied.'"

      - name: Verify Docker installation
        run: |
          ssh dev@$SSH_HOST "docker --version"
          ssh dev@$SSH_HOST "docker compose version"

      - name: Check Docker access for dev user
        run: ssh dev@$SSH_HOST "docker ps || echo 'No containers running'"

      - name: Rsync code to server
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ]; then
            echo "FULL_DEPLOY => all services"
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            echo "docker-compose changed => all services"
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ -n "${{ env.CHANGED_SERVICES }}" ]; then
            echo "Changed services: $CHANGED_SERVICES"
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          else
            echo "No changes => exit 0"
            exit 0
          fi

          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            rsync -avz --exclude '.git' --exclude '.github' . dev@$SSH_HOST:/home/dev/app/
            ssh dev@$SSH_HOST "cd /home/dev/app && docker compose build --no-cache && docker compose up -d --force-recreate"
          else
            for service in $SERVICES; do
              echo "Deploying service: $service"
              rsync -avz --exclude '.git' --exclude '.github' services/$service/ dev@$SSH_HOST:/home/dev/app/services/$service/
            done
            ssh dev@$SSH_HOST "cd /home/dev/app && docker compose build --no-cache $SERVICES && docker compose up -d --remove-orphans --force-recreate $SERVICES"
          fi

      - name: Create/update tg_ubot.env on server
        run: |
          ssh dev@$SSH_HOST "mkdir -p /home/dev/app/env"
          ssh dev@$SSH_HOST "echo 'TELEGRAM_API_ID=${{ env.TELEGRAM_API_ID }}' > /home/dev/app/env/tg_ubot.env"
          ssh dev@$SSH_HOST "echo 'TELEGRAM_API_HASH=${{ env.TELEGRAM_API_HASH }}' >> /home/dev/app/env/tg_ubot.env"
          ssh dev@$SSH_HOST "echo 'TELEGRAM_BOT_TOKEN=${{ env.TELEGRAM_BOT_TOKEN }}' >> /home/dev/app/env/tg_ubot.env"
          ssh dev@$SSH_HOST "echo 'TELEGRAM_PHONE=${{ env.TELEGRAM_PHONE }}' >> /home/dev/app/env/tg_ubot.env"
          ssh dev@$SSH_HOST "echo 'TELEGRAM_TARGET_IDS=${{ env.TELEGRAM_TARGET_IDS }}' >> /home/dev/app/env/tg_ubot.env"
          ssh dev@$SSH_HOST "echo 'SESSION_FILE=/app/session_name.session' >> /home/dev/app/env/tg_ubot.env"
          ssh dev@$SSH_HOST "echo 'ALLOWED_USER_IDS=${{ secrets.ALLOWED_USER_IDS }}' >> /home/dev/app/env/bot.env"


      - name: Check Docker Compose Status
        run: ssh dev@$SSH_HOST "cd /home/dev/app && docker compose ps"

      - name: View Logs for Deployed Services
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | grep -v '^db$' | paste -sd "," - | tr ',' ' ')
          else
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          fi
          for service in $SERVICES; do
            echo "Logs for service: $service"
            ssh dev@$SSH_HOST "cd /home/dev/app && docker compose logs $service --tail 50"
          done

      - name: Wait for Kafka to be healthy
        run: |
          for i in {1..24}; do
            status=$(ssh dev@$SSH_HOST "docker inspect --format='{{.State.Health.Status}}' kafka 2>/dev/null")
            if [ "$status" = "healthy" ]; then
              echo "Kafka is healthy now"
              break
            fi
            echo "Kafka not healthy yet, waiting..."
            sleep 5
          done
          if [ "$status" != "healthy" ]; then
            echo "Timed out waiting for Kafka to become healthy"
            exit 1
          fi

      - name: Check Kafka Health
        run: |
          ssh dev@$SSH_HOST "cd /home/dev/app && docker compose exec kafka kafka-broker-api-versions --bootstrap-server localhost:9092"
          echo "Kafka is responding"

      - name: Remove unused Docker volumes
        run: ssh dev@$SSH_HOST "docker volume prune -f"
