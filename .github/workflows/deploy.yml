# .github/workflows/deploy.yml
name: Deploy to Hetzner

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория с полной историей
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Загружает всю историю коммитов

      # Шаг 2: Настройка Git для обнаружения изменений
      - name: Set up Git
        run: git fetch origin main

      # Шаг 3: Определение изменённых микросервисов и важных файлов
      - name: Determine changed services and important files
        id: changes
        run: |
          # Определяем изменения только в папке services/ и исключаем файлы
          CHANGED_SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ | grep '^services/' | awk -F/ '{print $2}' | uniq | grep -v '^__init__.py$' || true)
          
          # Преобразуем многострочное значение в одну строку, разделяя сервисы запятыми
          CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | paste -sd "," -)
          
          # Выводим значение для отладки
          echo "Detected changed services: $CHANGED_SERVICES"
          
          # Устанавливаем переменную окружения
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

          # Проверяем, изменены ли docker-compose.yml или deploy.yml
          CHANGED_DOCKER_COMPOSE=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- docker-compose.yml | wc -l)
          CHANGED_DEPLOY_YML=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- .github/workflows/deploy.yml | wc -l)
          
          # Устанавливаем переменные окружения для полного деплоя или изменения docker-compose.yml
          if [ "$CHANGED_DEPLOY_YML" -gt 0 ]; then
            echo "FULL_DEPLOY=true" >> $GITHUB_ENV
          elif [ "$CHANGED_DOCKER_COMPOSE" -gt 0 ]; then
            echo "DOCKER_COMPOSE_CHANGED=true" >> $GITHUB_ENV
          fi
          
          # Дополнительный вывод для отладки
          echo "CHANGED_DOCKER_COMPOSE=$CHANGED_DOCKER_COMPOSE"
          echo "CHANGED_DEPLOY_YML=$CHANGED_DEPLOY_YML"

      # Шаг 4: Отладка - вывод изменённых микросервисов и списка изменённых файлов
      - name: Debug Git Diff
        run: |
          echo "CHANGED_SERVICES: $CHANGED_SERVICES"
          echo "DOCKER_COMPOSE_CHANGED: $DOCKER_COMPOSE_CHANGED"
          echo "FULL_DEPLOY: $FULL_DEPLOY"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ docker-compose.yml .github/workflows/deploy.yml

      # Шаг 5: Установка rsync и других зависимостей с проверкой актуальности версий
      - name: Install rsync and dependencies if outdated
        run: |
          # Функция для проверки и установки пакета
          install_if_outdated() {
            PACKAGE=$1
            INSTALLED_VERSION=$(dpkg -s $PACKAGE 2>/dev/null | grep '^Version:' | awk '{print $2}')
            AVAILABLE_VERSION=$(apt-cache policy $PACKAGE | grep 'Candidate:' | awk '{print $2}')
            
            if [ "$INSTALLED_VERSION" != "$AVAILABLE_VERSION" ]; then
              echo "$PACKAGE is outdated (installed: $INSTALLED_VERSION, available: $AVAILABLE_VERSION). Updating..."
              sudo apt-get update
              sudo apt-get install -y $PACKAGE
            else
              echo "$PACKAGE is up to date (version: $INSTALLED_VERSION). Skipping installation."
            fi
          }

          # Проверка и установка rsync
          install_if_outdated rsync

          # Проверка и установка jq
          install_if_outdated jq

      # Шаг 6: Настройка SSH Agent с использованием секретного ключа
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Шаг 7: Добавление хоста в known_hosts
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Шаг 8: Тестирование SSH подключения
      - name: Test SSH Connection
        run: ssh dev@${{ secrets.SSH_HOST }} 'echo "SSH connection established"'

      # Шаг 9: Установка Docker и Docker Compose на сервере (если не установлены)
      - name: Install Docker and Docker Compose on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            # Обновление пакетов и установка зависимостей
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release

            # Удаление старых версий Docker Compose (если есть)
            sudo rm -f /usr/local/bin/docker-compose
            sudo rm -f /home/dev/.docker/cli-plugins/docker-compose

            # Добавление официального GPG ключа Docker
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

            # Добавление репозитория Docker
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Обновление пакетов и установка Docker
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # Включение и запуск Docker
            sudo systemctl enable docker
            sudo systemctl start docker

            # Проверка установки Docker
            docker --version
            docker compose version
          EOF

      # Шаг 10: Добавление пользователя в группу Docker
      - name: Add user to Docker group
        run: ssh dev@${{ secrets.SSH_HOST }} "sudo usermod -aG docker dev"

      # Шаг 11: Перезагрузка SSH сессии для применения изменений групп
      - name: Reload SSH session to apply Docker group membership
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "newgrp docker << 'END'
          echo 'Docker group membership applied.'
          END"

      # Шаг 12: Проверка установки Docker и Docker Compose
      - name: Verify Docker installation
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker --version"
          ssh dev@${{ secrets.SSH_HOST }} "docker compose version"

      # Шаг 13: Проверка доступа к Docker для пользователя dev
      - name: Check Docker access for dev user
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker ps || echo 'No containers are running.'"

      # Шаг 14: Deploy services (rsync с исключением директории env/)
      - name: Deploy services
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ]; then
            echo "Deploying all services due to changes in deploy.yml"
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            echo "docker-compose.yml changed. Deploying all services."
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ -n "${{ env.CHANGED_SERVICES }}" ]; then
            echo "Deploying changed services: $CHANGED_SERVICES"
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          else
            echo "No relevant changes detected. Exiting deployment."
            exit 0
          fi

          # Удаление старых файлов (rsync с --delete и исключением env/)
          rsync -avz --delete --exclude '.git' --exclude '.github' --exclude 'env/' . dev@${{ secrets.SSH_HOST }}:/home/dev/app/

          # Проверка синтаксиса docker-compose.yml после копирования
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose config -q"

          # Запуск контейнеров с проверенной конфигурацией
          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d --build --force-recreate"
          else
            # Иначе поднимаем только изменённые сервисы
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d --build --remove-orphans --force-recreate $SERVICES"
          fi

      # Шаг 15: Создание или обновление .env файла на сервере (после rsync)
      - name: Create or Update .env file on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p /home/dev/app/env

            echo "TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}" > /home/dev/app/env/.env
            echo "TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}" >> /home/dev/app/env/.env
            echo "TELEGRAM_PHONE=${{ secrets.TELEGRAM_PHONE }}" >> /home/dev/app/env/.env
            echo "TELEGRAM_TARGET_IDS='${{ secrets.TELEGRAM_TARGET_IDS }}'" >> /home/dev/app/env/.env
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> /home/dev/app/env/.env
            echo "KAFKA_BOOTSTRAP_SERVERS=kafka:9092" >> /home/dev/app/env/.env
          EOF

      # Шаг 16: Создание или обновление .env файла для tg_ubot на сервере (после rsync)
      - name: Create or Update tg_ubot .env file on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p /home/dev/app/env

            echo "TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}" > /home/dev/app/env/tg_ubot.env
            echo "TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}" >> /home/dev/app/env/tg_ubot.env
            echo "TELEGRAM_PHONE='${{ secrets.TELEGRAM_PHONE }}'" >> /home/dev/app/env/tg_ubot.env
            echo "TELEGRAM_TARGET_IDS='${{ secrets.TELEGRAM_TARGET_IDS }}'" >> /home/dev/app/env/tg_ubot.env
            echo "KAFKA_BOOTSTRAP_SERVERS=kafka:9092" >> /home/dev/app/env/tg_ubot.env
          EOF

      # Шаг 17: Заполнение bot.env (после rsync)
      - name: Create or Update bot .env file on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p /home/dev/app/env

            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> /home/dev/app/env/bot.env
          EOF

      # Шаг 18: Проверка содержимого .env файла
      - name: Verify .env file on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "grep TELEGRAM_TARGET_IDS /home/dev/app/env/.env && echo 'Проверка завершена.'"

      # Шаг 19: Deploy session_tg
      - name: Decode and upload Telethon session
        run: |
          # 1. Создадим локальный файл session_name.session из секретной Base64 строки
          echo "${{ secrets.SESSION_FILE_BASE64 }}" | base64 -d > session_name.session
          
          # 2. Передадим этот файл на сервер, в /home/dev/app/ (или другую директорию)
          rsync -avz session_name.session dev@${{ secrets.SSH_HOST }}:/home/dev/app/
          
          # 3. Удалим временный файл
          rm session_name.session

      # Шаг 20: Остановка сервиса Kafka для обеспечения чистого завершения
      - name: Stop Kafka
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "if [ -f /home/dev/app/docker-compose.yml ]; then docker compose stop kafka || echo 'Kafka is not running.'; else echo 'docker-compose.yml not found, skipping docker compose stop kafka'; fi"

      # Шаг 21: Удаление устаревшего узла /brokers/ids/1 из Zookeeper
      - name: Clean up Zookeeper node for Kafka broker
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker exec zookeeper zkCli.sh -server localhost:2181 delete /brokers/ids/1 || echo 'Node /brokers/ids/1 does not exist'"

      # Шаг 22: Recreate PostgreSQL volume if DB changed
      - name: Recreate PostgreSQL volume if DB changed
        run: |
          # Предполагаем, что сервис называется "db" и в docker-compose.yml у вас он описывает Postgres.
          # Если в вашем docker-compose имя сервиса "postgres" — замените в командах ниже "db" на нужное имя.
          if echo "${{ env.CHANGED_SERVICES }}" | grep -q "db"; then
            echo "Изменения в сервисе db. Перезапускаем контейнер и пересоздаём volume."
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose stop db && docker compose rm -f -v db"
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d db"
          else
            echo "Сервис db не изменялся. Пропускаем пересоздание volume."
          fi

      # Шаг 23: Проверка статуса Docker Compose
      - name: Check Docker Compose Status
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps"

      # Шаг 24: Просмотр логов для деплоенных микросервисов
      - name: View Logs for Deployed Services
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," - | tr ',' ' ')
          else
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          fi

          for service in $SERVICES; do
            echo "Логи сервиса: $service"
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose logs $service --tail 50"
          done

      # Шаг 25: Обеспечение работы Kafka после деплоя
      - name: Ensure Kafka is running
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d kafka"

      # Шаг 26: Проверка состояния Kafka
      - name: Wait for Kafka to be healthy
        run: |
          # Запускаем Kafka (если ещё не запущен)
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d kafka"
          
          # Ждём максимум ~2 минуты (24 раза по 5 секунд)
          for i in {1..24}; do
            status=$(ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps --format json" \
              | jq -r '.[] | select(.Service == "kafka") | .Health')
            
            if [ "$status" = "healthy" ]; then
              echo "Kafka is healthy now"
              exit 0
            fi
            echo "Kafka not healthy yet. Waiting..."
            sleep 5
          done
          echo "Timed out waiting for Kafka to become healthy"
          exit 1

      # Шаг 27: Проверка здоровья Kafka
      - name: Check Kafka Health
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose exec kafka kafka-broker-api-versions --bootstrap-server localhost:9092"
          echo "Kafka is alive and responding"

      # Шаг 28: Удаление неиспользуемых Docker volumes
      - name: Remove unused Docker volumes
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker volume prune -f"

      # Шаг 29: Дополнительная отладка - Вывод PATH и переменных окружения
      - name: Debug Environment
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "echo \$PATH"
          ssh dev@${{ secrets.SSH_HOST }} "env"
