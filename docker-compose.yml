services:

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    environment:
      # Настройки KRaft
      KAFKA_KRAFT_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tg_ubot
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./services/db/init-db:/docker-entrypoint-initdb.d
    networks:
      - app_network

  tg_ubot:
    container_name: tg_ubot
    build:
      context: ./services/tg_ubot
    env_file:
      - /home/dev/app/env/tg_ubot.env
    environment:
      - SESSION_FILE=/app/session_name.session
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - /home/dev/app/session_name.session:/app/session_name.session
      - tg_ubot_state_volume:/app/data

  db:
    container_name: db
    build:
      context: ./services/db
    env_file:
      - ./env/.env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=tg_ubot
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    networks:
      - app_network

  bot:
    container_name: bot
    build:
      context: ./services/bot
    env_file:
      - /home/dev/app/env/bot.env
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - shared_files:/app/files

  xml_worker:
    container_name: xml_worker
    build:
      context: ./services/xml_worker
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - shared_files:/app/files

networks:
  app_network:
    name: app_network
    driver: bridge

volumes:
  kafka_data:
    driver: local
  pgdata:
    driver: local
  shared_files:
    driver: local
  tg_ubot_state_volume:
    driver: local
