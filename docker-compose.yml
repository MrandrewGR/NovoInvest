# docker-compose.yml

services:
  # ------------------------------------------
  # Zookeeper
  # ------------------------------------------
  ni-zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ni-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - ni_zookeeper_data:/var/lib/zookeeper/data
      - ni_zookeeper_log:/var/lib/zookeeper/log
    networks:
      - novoinvest_network

  # ------------------------------------------
  # Kafka
  # ------------------------------------------
  ni-kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ni-kafka
    depends_on:
      - ni-zookeeper
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ni-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ni-kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ni_kafka_data:/var/lib/kafka/data
    networks:
      - novoinvest_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 10

  # ------------------------------------------
  # Postgres
  # ------------------------------------------
  ni-postgres:
    image: postgres:15-alpine
    container_name: ni-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tg_ubot
    volumes:
      - ni_pgdata:/var/lib/postgresql/data
      - ./services/db/init-db:/docker-entrypoint-initdb.d  # optional: to run init scripts
    networks:
      - novoinvest_network

  # ------------------------------------------
  # tg_ubot microservice
  # ------------------------------------------
  ni-tg_ubot:
    container_name: ni-tg_ubot
    build:
      context: ./services/tg_ubot
      dockerfile: Dockerfile
      args:
        CACHEBUST: 1
        TG_UBOT_COMMIT_HASH: main
    env_file:
      - /home/dev/app/env/tg_ubot.env
    environment:
      DB_NAME: "tg_ubot"
      TG_UBOT_SCHEMA: "public"
      SESSION_FILE: /app/session_name.session
      # -- Kafka:
      KAFKA_BOOTSTRAP_SERVERS: "ni-kafka:9092"
      KAFKA_TOPIC: "ni-bot-in"
      KAFKA_RESULT_TOPIC: "ni-isin-out"
    depends_on:
      ni-kafka:
        condition: service_healthy
      ni-postgres:
        condition: service_started
    restart: unless-stopped
    networks:
      - novoinvest_network
    volumes:
      - /home/dev/app/session_name.session:/app/session_name.session
      - ni_tg_ubot_state_volume:/app/data

  # ------------------------------------------
  # bot microservice
  # ------------------------------------------
  ni-bot:
    container_name: ni-bot
    build:
      context: ./services/bot
    env_file:
      - /home/dev/app/env/bot.env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "ni-kafka:9092"
      KAFKA_TOPIC: "ni-bot-in"
      KAFKA_RESULT_TOPIC: "ni-isin-out"
      DB_HOST: "ni-postgres"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "tg_ubot"
    depends_on:
      ni-kafka:
        condition: service_healthy
      ni-postgres:
        condition: service_started
    restart: unless-stopped
    networks:
      - novoinvest_network
    volumes:
      - ni_shared_files:/app/files

  # ------------------------------------------
  # xml_worker microservice
  # ------------------------------------------
  ni-xml_worker:
    container_name: ni-xml_worker
    build:
      context: ./services/xml_worker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "ni-kafka:9092"
      # reusing the same variable name from code ("KAFKA_TOPIC") for the consumer:
      KAFKA_TOPIC: "ni-bot-in"
      # the produce topic:
      UBOT_PRODUCE_TOPIC: "ni-isin-out"
      DB_HOST: "ni-postgres"
      DB_PORT: "5432"
    depends_on:
      ni-kafka:
        condition: service_healthy
      ni-postgres:
        condition: service_started
    restart: unless-stopped
    networks:
      - novoinvest_network
    volumes:
      - ni_shared_files:/app/files

  # ------------------------------------------
  # nsd_worker microservice
  # ------------------------------------------
  ni-nsd_worker:
    container_name: ni-nsd_worker
    build:
      context: ./services/nsd_worker
      dockerfile: Dockerfile
    environment:
      # Kafka variables
      KAFKA_BROKER: "ni-kafka:9092"
      KAFKA_CONSUME_TOPIC: "ni-ubot-out"
      KAFKA_PRODUCE_TOPIC: "ni-nsd-out"
      KAFKA_GROUP_ID: "nsd_worker_group"

      # DB variables
      DB_HOST: "ni-postgres"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"

      # Extra DB environment used by nsd_worker
      NSD_WORKER_DB_NAME: "nsd_worker_db"
      TG_UBOT_DB_NAME: "tg_ubot"

      NSD_PARENT_TABLE: "nsd_parent_table"
      TG_UBOT_NSD_TABLE: "messages_nsdfeed_ru"

      LOG_LEVEL: "DEBUG"
      POLL_INTERVAL_DB: "30"
      DELAY_MIN: "3"
      DELAY_MAX: "15"

    depends_on:
      ni-kafka:
        condition: service_healthy
      ni-postgres:
        condition: service_started
    restart: unless-stopped
    networks:
      - novoinvest_network
    volumes:
      - ni_shared_files:/app/files

  # ------------------------------------------
  # db service (the "consumer" logic)
  # ------------------------------------------
  db-service:
    container_name: ni-db-service
    build:
      context: ./services/db
    environment:
      DB_HOST: "ni-postgres"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "tg_ubot"

      # Kafka:
      KAFKA_BOOTSTRAP_SERVERS: "ni-kafka:9092"
      # Additional topics used inside process_messages.py or instructions_consumer.py
      KAFKA_TG_INSTRUCTIONS: "ni-tg-instructions"
      KAFKA_UBOT_OUTPUT_TOPIC: "ni-ubot-out"
      KAFKA_GAP_SCAN_TOPIC: "ni-gap-scan-request"
      KAFKA_GAP_SCAN_RESPONSE_TOPIC: "ni-gap-scan-response"

    depends_on:
      ni-kafka:
        condition: service_healthy
      ni-postgres:
        condition: service_started
    restart: unless-stopped
    networks:
      - novoinvest_network
    volumes:
      - ni_shared_files:/app/files


# ------------------------------------------
# Networks & Volumes
# ------------------------------------------
networks:
  novoinvest_network:
    name: novoinvest_network
    driver: bridge

volumes:
  ni_zookeeper_data:
    driver: local
  ni_zookeeper_log:
    driver: local
  ni_kafka_data:
    driver: local
  ni_pgdata:
    driver: local
  ni_shared_files:
    driver: local
  ni_tg_ubot_state_volume:
    driver: local
