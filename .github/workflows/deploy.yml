name: Деплой на Hetzner

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout кода
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Получение полной истории коммитов

      - name: Настройка Git
        run: git fetch origin main

      - name: Определение измененных сервисов и важных файлов
        id: changes
        run: |
          CHANGED_SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ | grep '^services/' | awk -F/ '{print $2}' | uniq | grep -v '^__init__.py$' || true)
          CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | paste -sd "," -)
          echo "Обнаруженные измененные сервисы: $CHANGED_SERVICES"
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

          CHANGED_DOCKER_COMPOSE=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- docker-compose.yml | wc -l)
          CHANGED_DEPLOY_YML=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- .github/workflows/deploy.yml | wc -l)

          if [ "$CHANGED_DEPLOY_YML" -gt 0 ]; then
            echo "FULL_DEPLOY=true" >> $GITHUB_ENV
          elif [ "$CHANGED_DOCKER_COMPOSE" -gt 0 ]; then
            echo "DOCKER_COMPOSE_CHANGED=true" >> $GITHUB_ENV
          fi

          echo "CHANGED_DOCKER_COMPOSE=$CHANGED_DOCKER_COMPOSE"
          echo "CHANGED_DEPLOY_YML=$CHANGED_DEPLOY_YML"

      - name: Отладка изменений Git
        run: |
          echo "CHANGED_SERVICES: $CHANGED_SERVICES"
          echo "DOCKER_COMPOSE_CHANGED: $DOCKER_COMPOSE_CHANGED"
          echo "FULL_DEPLOY: $FULL_DEPLOY"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ docker-compose.yml .github/workflows/deploy.yml

      - name: Установка rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Настройка SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Добавление хоста в known_hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Тестирование SSH подключения
        run: ssh dev@${{ secrets.SSH_HOST }} 'echo "SSH connection established"'

      - name: Создание или обновление .env файла на сервере
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "rm -f /home/dev/app/env/.env"
          ssh dev@${{ secrets.SSH_HOST }} "mkdir -p /home/dev/app/env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }} > /home/dev/app/env/.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }} >> /home/dev/app/env/.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_PHONE=${{ secrets.TELEGRAM_PHONE }} >> /home/dev/app/env/.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_TARGET_IDS='${{ secrets.TELEGRAM_TARGET_IDS }}' >> /home/dev/app/env/.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} >> /home/dev/app/env/.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo KAFKA_BOOTSTRAP_SERVERS=kafka:9092 >> /home/dev/app/env/.env"

      - name: Создание или обновление tg_ubot .env файла на сервере
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "mkdir -p /home/dev/app/env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }} > /home/dev/app/env/tg_ubot.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }} >> /home/dev/app/env/tg_ubot.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_PHONE='${{ secrets.TELEGRAM_PHONE }}' >> /home/dev/app/env/tg_ubot.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_TARGET_IDS='${{ secrets.TELEGRAM_TARGET_IDS }}' >> /home/dev/app/env/tg_ubot.env"
          ssh dev@${{ secrets.SSH_HOST }} "echo KAFKA_BOOTSTRAP_SERVERS=kafka:9092 >> /home/dev/app/env/tg_ubot.env"

      - name: Создание или обновление bot .env файла на сервере
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "echo TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} >> /home/dev/app/env/bot.env"

      - name: Проверка содержимого .env файла на сервере
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "grep TELEGRAM_TARGET_IDS /home/dev/app/env/.env && echo 'Проверка завершена.'"

      - name: Декодирование и загрузка Telethon сессии
        run: |
          # 1. Создание локального файла session_name.session из секретной Base64 строки
          echo "${{ secrets.SESSION_FILE_BASE64 }}" | base64 -d > session_name.session
      
          # 2. Передача этого файла на сервер
          rsync -avz session_name.session dev@${{ secrets.SSH_HOST }}:/home/dev/app/
      
          # 3. Удаление временного файла
          rm session_name.session

      - name: Перезапуск сервиса tg_ubot
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose restart tg_ubot"

      - name: Остановка Kafka
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose stop kafka"

      - name: Очистка узла Zookeeper для Kafka брокера
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker exec zookeeper zkCli.sh -server localhost:2181 delete /brokers/ids/1 || echo 'Node /brokers/ids/1 does not exist'"

      - name: Установка Docker и Docker Compose на сервере
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            # Проверка установки Docker
            if ! command -v docker &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            # Проверка установки Docker Compose
            if ! command -v docker compose &> /dev/null
            then
              sudo mkdir -p /home/dev/.docker/cli-plugins/
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o /home/dev/.docker/cli-plugins/docker-compose
              sudo chmod +x /home/dev/.docker/cli-plugins/docker-compose
            fi
            docker compose version
          EOF

      - name: Добавление пользователя в группу Docker
        run: ssh dev@${{ secrets.SSH_HOST }} "sudo usermod -aG docker dev"

      - name: Удаление существующей Docker сети
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker network rm app_app_network || echo 'Сеть не существует или уже удалена'"

      - name: Деплой сервисов
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ]; then
            echo "Выполняется полный деплой из-за изменений в deploy.yml"
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            echo "docker-compose.yml изменен. Выполняется деплой всех сервисов."
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ -n "${{ env.CHANGED_SERVICES }}" ]; then
            echo "Деплой измененных сервисов: $CHANGED_SERVICES"
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          else
            echo "Не обнаружены релевантные изменения. Пропуск деплоя."
            exit 0
          fi

          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            rsync -avz --exclude '.git' --exclude '.github' . dev@${{ secrets.SSH_HOST }}:/home/dev/app/
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d --build --force-recreate"
          else
            for service in $SERVICES; do
              echo "Деплой сервиса: $service"
              rsync -avz --exclude '.git' --exclude '.github' services/$service/ dev@${{ secrets.SSH_HOST }}:/home/dev/app/services/$service/
            done
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d --build --remove-orphans --force-recreate $SERVICES"
          fi

      - name: Применение миграций базы данных
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose exec db alembic upgrade head"

      - name: Проверка статуса Docker Compose
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps"

      - name: Просмотр логов для деплоенных сервисов
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," - | tr ',' ' ')
          else
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          fi

          for service in $SERVICES; do
            echo "Логи сервиса: $service"
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose logs $service --tail 50"
          done

      - name: Обеспечение работы Kafka после деплоя
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d kafka"

      - name: Ожидание готовности Kafka
        run: |
          for i in {1..24}; do
            status=$(ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps --format json" \
              | jq -r '.[] | select(.Service == "kafka") | .Health')
            
            if [ "$status" = "healthy" ]; then
              echo "Kafka теперь здоров"
              exit 0
            fi
            echo "Kafka еще не здоров. Ожидание..."
            sleep 5
          done
          echo "Истекло время ожидания готовности Kafka"
          exit 1

      - name: Проверка состояния Kafka
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose exec kafka kafka-broker-api-versions --bootstrap-server localhost:9092"
          echo "Kafka отвечает и работает"

      - name: Удаление неиспользуемых Docker томов
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker volume prune -f"
