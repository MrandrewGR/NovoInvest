name: Deploy to Hetzner

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория с полной историей
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Загружает всю историю коммитов

      # Шаг 2: Настройка Git для обнаружения изменений
      - name: Set up Git
        run: git fetch origin main

      # Шаг 3: Определение изменённых микросервисов и важных файлов
      - name: Determine changed services and important files
        id: changes
        run: |
          CHANGED_SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ \
            | grep '^services/' \
            | awk -F/ '{print $2}' \
            | uniq || true)
          CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | paste -sd "," -)
          echo "Detected changed services: $CHANGED_SERVICES"
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

          CHANGED_DOCKER_COMPOSE=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- docker-compose.yml | wc -l)
          CHANGED_DEPLOY_YML=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- .github/workflows/deploy.yml | wc -l)

          if [ "$CHANGED_DEPLOY_YML" -gt 0 ]; then
            echo "FULL_DEPLOY=true" >> $GITHUB_ENV
          elif [ "$CHANGED_DOCKER_COMPOSE" -gt 0 ]; then
            echo "DOCKER_COMPOSE_CHANGED=true" >> $GITHUB_ENV
          fi

          echo "CHANGED_DOCKER_COMPOSE=$CHANGED_DOCKER_COMPOSE"
          echo "CHANGED_DEPLOY_YML=$CHANGED_DEPLOY_YML"

      # Шаг 4: Отладка - вывод изменённых микросервисов и списка изменённых файлов
      - name: Debug Git Diff
        run: |
          echo "CHANGED_SERVICES: $CHANGED_SERVICES"
          echo "DOCKER_COMPOSE_CHANGED: $DOCKER_COMPOSE_CHANGED"
          echo "FULL_DEPLOY: $FULL_DEPLOY"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- services/ docker-compose.yml .github/workflows/deploy.yml

      # Шаг 5: Установка rsync и др. зависимостей
      - name: Install rsync and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync jq

      # Шаг 6: Настройка SSH Agent
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Шаг 7: known_hosts
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Шаг 8: Тест SSH
      - name: Test SSH Connection
        run: ssh dev@${{ secrets.SSH_HOST }} 'echo "SSH connection established"'

      # Шаг 9: Установка Docker + Docker Compose (если нужно)
      - name: Install Docker and Docker Compose on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl enable docker
              sudo systemctl start docker
            fi
            docker --version
            docker compose version
          EOF

      # Шаг 10: Добавление пользователя dev в группу docker
      - name: Add user to Docker group
        run: ssh dev@${{ secrets.SSH_HOST }} "sudo usermod -aG docker dev"

      # Шаг 11: (Опционально) Применение изменений групп
      - name: Reload SSH session to apply Docker group membership
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "newgrp docker << 'END'
          echo 'Docker group membership applied.'
          END"

      # Шаг 12: Проверка Docker
      - name: Verify Docker installation
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker --version"
          ssh dev@${{ secrets.SSH_HOST }} "docker compose version"

      # Шаг 13: Проверка доступа к Docker
      - name: Check Docker access for dev user
        run: ssh dev@${{ secrets.SSH_HOST }} "docker ps || echo 'No containers running'"

      # Шаг 14: rsync проекта, исключая env/
      - name: Sync code to server
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ]; then
            echo "FULL_DEPLOY => all services"
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            echo "docker-compose changed => all services"
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," -)
          elif [ -n "${{ env.CHANGED_SERVICES }}" ]; then
            echo "Changed services: $CHANGED_SERVICES"
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          else
            echo "No changes => exit 0"
            exit 0
          fi

          rsync -avz --delete --exclude '.git' --exclude '.github' --exclude 'env/' . dev@${{ secrets.SSH_HOST }}:/home/dev/app/

      # Шаг 15: Создание .env, tg_ubot.env, bot.env
      - name: Create env files on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p /home/dev/app/env

            # .env
            echo "TELEGRAM_API_ID=${TELEGRAM_API_ID}" > /home/dev/app/env/.env
            echo "TELEGRAM_API_HASH=${TELEGRAM_API_HASH}" >> /home/dev/app/env/.env
            echo "TELEGRAM_PHONE=${TELEGRAM_PHONE}" >> /home/dev/app/env/.env
            echo "TELEGRAM_TARGET_IDS='${TELEGRAM_TARGET_IDS}'" >> /home/dev/app/env/.env
            echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" >> /home/dev/app/env/.env
            echo "KAFKA_BOOTSTRAP_SERVERS=kafka:9092" >> /home/dev/app/env/.env

            # tg_ubot.env
            echo "TELEGRAM_API_ID=${TELEGRAM_API_ID}" > /home/dev/app/env/tg_ubot.env
            echo "TELEGRAM_API_HASH=${TELEGRAM_API_HASH}" >> /home/dev/app/env/tg_ubot.env
            echo "TELEGRAM_PHONE='${TELEGRAM_PHONE}'" >> /home/dev/app/env/tg_ubot.env
            echo "TELEGRAM_TARGET_IDS='${TELEGRAM_TARGET_IDS}'" >> /home/dev/app/env/tg_ubot.env
            echo "KAFKA_BOOTSTRAP_SERVERS=kafka:9092" >> /home/dev/app/env/tg_ubot.env

            # bot.env
            echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" > /home/dev/app/env/bot.env

            echo "===== ENV FILES ====="
            ls -la /home/dev/app/env/
          EOF

      # Шаг 16: Проверка содержимого .env
      - name: Verify main .env file
        run: ssh dev@${{ secrets.SSH_HOST }} "grep TELEGRAM_TARGET_IDS /home/dev/app/env/.env && echo 'Check .env done'"

      # Шаг 17: Загрузка Telethon session
      - name: Decode and upload Telethon session
        run: |
          echo "${{ secrets.SESSION_FILE_BASE64 }}" | base64 -d > session_name.session
          rsync -avz session_name.session dev@${{ secrets.SSH_HOST }}:/home/dev/app/
          rm session_name.session

      # Шаг 18: Запуск контейнеров
      - name: Docker Compose Up
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/dev/app
            # Проверяем синтаксис (теперь env-файлы уже есть!)
            docker compose config -q

            # Запускаем контейнеры
            docker compose up -d --build --force-recreate
          EOF

      # Шаг 19: Остановка Kafka (опционально)
      - name: Stop Kafka
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "if [ -f /home/dev/app/docker-compose.yml ]; then docker compose stop kafka || echo 'Kafka not running'; fi"

      # Шаг 20: Удаление устаревшего узла /brokers/ids/1 из Zookeeper
      - name: Clean up Zookeeper node for Kafka broker
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker exec zookeeper zkCli.sh -server localhost:2181 delete /brokers/ids/1 || echo 'Node /brokers/ids/1 does not exist'"

      # Шаг 21: Пересоздать volume PostgreSQL, если сервис db изменился
      - name: Recreate PostgreSQL volume if DB changed
        run: |
          if echo "${{ env.CHANGED_SERVICES }}" | grep -q "db"; then
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose stop db && docker compose rm -f -v db"
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d db"
          else
            echo "DB not changed, skip volume recreate."
          fi

      # Шаг 22: Проверка статуса Docker Compose
      - name: Check Docker Compose Status
        run: ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps"

      # Шаг 23: Просмотр логов для деплоенных микросервисов
      - name: View Logs for Deployed Services
        run: |
          if [ "${{ env.FULL_DEPLOY }}" == "true" ] || [ "${{ env.DOCKER_COMPOSE_CHANGED }}" == "true" ]; then
            SERVICES=$(ls -d services/*/ | xargs -n 1 basename | paste -sd "," - | tr ',' ' ')
          else
            SERVICES=$(echo "$CHANGED_SERVICES" | tr ',' ' ')
          fi

          for service in $SERVICES; do
            echo "Logs for service: $service"
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose logs $service --tail 50"
          done

      # Шаг 24: Обеспечение работы Kafka
      - name: Ensure Kafka is running
        run: ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d kafka"

      # Шаг 25: Проверка состояния Kafka (ждём Healthy)
      - name: Wait for Kafka to be healthy
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d kafka"
          for i in {1..24}; do
            status=$(ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps --format json" \
              | jq -r '.[] | select(.Service == "kafka") | .Health')

            if [ "$status" = "healthy" ]; then
              echo "Kafka is healthy now"
              exit 0
            fi
            echo "Kafka not healthy yet, waiting..."
            sleep 5
          done
          echo "Timed out waiting for Kafka to become healthy"
          exit 1

      # Шаг 26: Проверка здоровья Kafka
      - name: Check Kafka Health
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose exec kafka kafka-broker-api-versions --bootstrap-server localhost:9092"
          echo "Kafka is responding"

      # Шаг 27: Удаление неиспользуемых Docker volumes
      - name: Remove unused Docker volumes
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "docker volume prune -f"

      # Шаг 28: Дополнительная отладка - Вывод PATH и переменных окружения
      - name: Debug Environment
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "echo \$PATH"
          ssh dev@${{ secrets.SSH_HOST }} "env"
