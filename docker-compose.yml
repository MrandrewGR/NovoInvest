version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tg_ubot
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./services/db/init-db:/docker-entrypoint-initdb.d
    networks:
      - app_network

  tg_ubot:
    container_name: tg_ubot
    build:
      context: ./services/tg_ubot
    env_file:
      - /home/dev/app/env/tg_ubot.env
    environment:
      - SESSION_FILE=/app/session_name.session
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_UBOT_OUTPUT_TOPIC=tg_ubot_output
      - KAFKA_GAP_SCAN_RESPONSE_TOPIC=gap_scan_response
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - /home/dev/app/session_name.session:/app/session_name.session
      - tg_ubot_state_volume:/app/data
    command: ["wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]

  db:
    container_name: db
    build:
      context: ./services/db
    env_file:
      - ./env/.env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: tg_ubot
      KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      KAFKA_UBOT_OUTPUT_TOPIC=tg_ubot_output
      KAFKA_GROUP_ID=db_consumer_group
      KAFKA_GAP_SCAN_TOPIC=gap_scan_request
      KAFKA_GAP_SCAN_RESPONSE_TOPIC=gap_scan_response
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - db_data:/app/data
    command: ["wait-for-it.sh", "kafka:9092", "--", "python", "process_messages.py"]

  bot:
    container_name: bot
    build:
      context: ./services/bot
    env_file:
      - /home/dev/app/env/bot.env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_UBOT_OUTPUT_TOPIC=tg_ubot_output
      - KAFKA_GAP_SCAN_RESPONSE_TOPIC=gap_scan_response
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - shared_files:/app/files
    command: ["wait-for-it.sh", "kafka:9092", "--", "python", "bot.py"]

  xml_worker:
    container_name: xml_worker
    build:
      context: ./services/xml_worker
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_UBOT_OUTPUT_TOPIC=tg_ubot_output
      - KAFKA_GAP_SCAN_RESPONSE_TOPIC=gap_scan_response
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - shared_files:/app/files
    command: ["wait-for-it.sh", "kafka:9092", "--", "python", "xml_worker.py"]

networks:
  app_network:
    name: app_network
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  zookeeper_log:
    driver: local
  kafka_data:
    driver: local
  pgdata:
    driver: local
  shared_files:
    driver: local
  tg_ubot_state_volume:
    driver: local
  db_data:
    driver: local
