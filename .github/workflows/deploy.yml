name: Deploy to Hetzner

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git for detecting changes
        run: |
          git fetch origin main

      - name: Determine changed containers
        id: changes
        run: |
          # Предполагается, что каждый контейнер находится в отдельной папке внутри /containers
          CHANGED_CONTAINERS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^containers/' | awk -F/ '{print $2}' | uniq)
          echo "CHANGED_CONTAINERS=$CHANGED_CONTAINERS" >> $GITHUB_ENV

      - name: Debug Changed Containers
        run: |
          echo "Changed Containers: $CHANGED_CONTAINERS"

      - name: Install rsync and other dependencies
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: ssh dev@${{ secrets.SSH_HOST }} 'echo "SSH connection established"'

      - name: Decode and Save Session File
        run: |
          echo "${{ secrets.SESSION_FILE_BASE64 }}" | base64 --decode > session_name.session
          chmod 600 session_name.session

      - name: Copy session to server
        run: |
          rsync -avz session_name.session dev@${{ secrets.SSH_HOST }}:/home/dev/app/session_name.session

      - name: Install Docker and Docker Compose on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            if ! command -v docker compose &> /dev/null
            then
              sudo mkdir -p /home/dev/.docker/cli-plugins/
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o /home/dev/.docker/cli-plugins/docker-compose
              sudo chmod +x /home/dev/.docker/cli-plugins/docker-compose
            fi
            docker compose version
          EOF

      - name: Add user to Docker group
        run: ssh dev@${{ secrets.SSH_HOST }} "sudo usermod -aG docker dev"

      - name: Create .env file on server
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "mkdir -p /home/dev/app/env"
          ssh dev@${{ secrets.SSH_HOST }} "cat <<EOF > /home/dev/app/env/.env
          TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_PHONE=${{ secrets.TELEGRAM_PHONE }}
          TELEGRAM_CHANNEL_ID=${{ secrets.TELEGRAM_CHANNEL_ID }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          KAFKA_BOOTSTRAP_SERVERS=kafka:9092
          EOF"

      - name: Deploy changed containers
        run: |
          for container in $CHANGED_CONTAINERS; do
            echo "Deploying container: $container"
            # Copy container code to server
            rsync -avz --exclude '.git' --exclude '.github' containers/$container/ dev@${{ secrets.SSH_HOST }}:/home/dev/app/containers/$container/
            # Rebuild and recreate the container
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose up -d --build --force-recreate $container"
          done

      - name: Check Docker Compose Status
        run: |
          ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose ps"

      - name: View Logs for Changed Containers
        run: |
          for container in $CHANGED_CONTAINERS; do
            echo "Logs for container: $container"
            ssh dev@${{ secrets.SSH_HOST }} "cd /home/dev/app && docker compose logs $container --tail 50"
          done
